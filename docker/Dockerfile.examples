# Multi-stage Dockerfile for Examples
FROM node:24-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install pnpm
RUN corepack enable pnpm

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./
COPY examples/*/package.json ./examples/*/
COPY packages/*/package.json ./packages/*/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Build stage
FROM base AS builder
WORKDIR /app

# Install pnpm
RUN corepack enable pnpm

# Copy dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/examples ./examples
COPY --from=deps /app/packages ./packages

# Copy source code
COPY . .

# Build packages first, then examples
RUN pnpm run build:packages
RUN pnpm run build:examples

# Production stage for Next.js example
FROM base AS nextjs-runner
WORKDIR /app

# Install pnpm
RUN corepack enable pnpm

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built Next.js application
COPY --from=builder --chown=nextjs:nodejs /app/examples/next-*/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/examples/next-*/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/examples/next-*/.next/static ./.next/static

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV NODE_ENV production

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

CMD ["node", "server.js"]