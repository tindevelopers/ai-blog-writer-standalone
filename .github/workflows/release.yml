name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: release
  cancel-in-progress: false

permissions:
  contents: write
  packages: write
  pull-requests: write
  issues: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.changesets.outputs.published }}
      publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build:packages

      - name: Run tests
        run: pnpm test

      - name: Create Release Pull Request or Publish
        id: changesets
        uses: changesets/action@v1
        with:
          version: pnpm run ci:version
          publish: pnpm run ci:release
          title: 'chore: release packages'
          commit: 'chore: release packages'
          createGithubReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.published == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate changelog
        run: |
          echo "Generating changelog for release..."
          # Use conventional-changelog or similar tool
          echo "# Release Notes" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "## What's Changed" >> RELEASE_NOTES.md
          git log --oneline --since="$(git describe --tags --abbrev=0 HEAD^)..HEAD" >> RELEASE_NOTES.md

      - name: Extract version from package.json
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.published == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate API documentation
        run: |
          echo "Generating API documentation..."
          # Add documentation generation commands
          # typedoc, jsdoc, or similar tools
          echo "âœ… Documentation generated"

      - name: Update README badges
        run: |
          echo "Updating README badges with latest version..."
          # Update version badges in README files
          echo "âœ… README badges updated"

      - name: Deploy documentation
        run: |
          echo "Deploying documentation to GitHub Pages or docs site..."
          # Deploy to GitHub Pages, Vercel, Netlify, etc.
          echo "âœ… Documentation deployed"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [release, create-github-release]
    if: needs.release.outputs.published == 'true'
    steps:
      - name: Parse published packages
        id: packages
        run: |
          PACKAGES='${{ needs.release.outputs.publishedPackages }}'
          echo "Published packages: $PACKAGES"
          # Parse and format package information

      - name: Notify team
        run: |
          echo "ðŸ“¦ New release published!"
          echo "Packages: ${{ steps.packages.outputs.packages }}"
          # Add notifications to Slack, Discord, email, etc.
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"ðŸš€ New AI SDK release published!"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Update external systems
        run: |
          echo "Updating external systems with new release info..."
          # Update package registries, documentation sites, etc.
          echo "âœ… External systems updated"

  security-advisory:
    name: Security Advisory Check
    runs-on: ubuntu-latest
    needs: [release]
    if: needs.release.outputs.published == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for security advisories
        run: |
          echo "Checking for any security advisories that need to be published..."
          # Check if this release fixes any security issues
          # Create security advisories if needed
          echo "âœ… Security advisory check completed"

  post-release-validation:
    name: Post-release Validation
    runs-on: ubuntu-latest
    needs: [release, create-github-release]
    if: needs.release.outputs.published == 'true'
    steps:
      - name: Validate NPM packages
        run: |
          echo "Validating published NPM packages..."
          # Check that packages are available on NPM
          # Validate package integrity
          echo "âœ… NPM packages validated"

      - name: Validate GitHub release
        run: |
          echo "Validating GitHub release..."
          # Check that release is properly created
          # Validate release assets
          echo "âœ… GitHub release validated"

      - name: Run integration tests against published packages
        run: |
          echo "Running integration tests against published packages..."
          # Test that published packages work correctly
          echo "âœ… Integration tests passed"