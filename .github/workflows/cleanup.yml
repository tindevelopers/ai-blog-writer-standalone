name: Cleanup

on:
  schedule:
    - cron: '0 3 * * 0' # Weekly on Sunday at 3 AM UTC
  workflow_dispatch:
    inputs:
      cleanup-type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - artifacts
          - images
          - caches

permissions:
  contents: read
  packages: write
  actions: write

jobs:
  cleanup-artifacts:
    name: Cleanup Build Artifacts
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup-type == 'artifacts' || github.event.inputs.cleanup-type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Delete old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all artifacts
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner,
              repo,
              per_page: 100
            });
            
            // Delete artifacts older than 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            let deletedCount = 0;
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < thirtyDaysAgo) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner,
                    repo,
                    artifact_id: artifact.id
                  });
                  console.log(`Deleted artifact: ${artifact.name} (${artifact.id})`);
                  deletedCount++;
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }
            
            console.log(`Deleted ${deletedCount} old artifacts`);

  cleanup-docker-images:
    name: Cleanup Docker Images
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup-type == 'images' || github.event.inputs.cleanup-type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Delete old Docker images
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const packageNames = ['ai-blog-writer-standalone-ai-sdk', 'ai-blog-writer-standalone-examples'];
            
            for (const packageName of packageNames) {
              try {
                // Get package versions
                const versions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                  package_type: 'container',
                  package_name: packageName,
                  org: owner,
                  per_page: 100
                });
                
                // Keep the latest 10 versions, delete the rest
                const versionsToDelete = versions.data.slice(10);
                
                let deletedCount = 0;
                for (const version of versionsToDelete) {
                  try {
                    await github.rest.packages.deletePackageVersionForOrg({
                      package_type: 'container',
                      package_name: packageName,
                      org: owner,
                      package_version_id: version.id
                    });
                    console.log(`Deleted ${packageName} version: ${version.name}`);
                    deletedCount++;
                  } catch (error) {
                    console.log(`Failed to delete ${packageName} version ${version.name}: ${error.message}`);
                  }
                }
                
                console.log(`Deleted ${deletedCount} old versions of ${packageName}`);
              } catch (error) {
                console.log(`Failed to process package ${packageName}: ${error.message}`);
              }
            }

  cleanup-caches:
    name: Cleanup Action Caches
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup-type == 'caches' || github.event.inputs.cleanup-type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Cleanup caches
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            try {
              // Get all caches
              const caches = await github.rest.actions.getActionsCacheList({
                owner,
                repo,
                per_page: 100
              });
              
              // Delete caches older than 7 days or unused for 3 days
              const sevenDaysAgo = new Date();
              sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
              
              const threeDaysAgo = new Date();
              threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
              
              let deletedCount = 0;
              for (const cache of caches.data.actions_caches) {
                const createdAt = new Date(cache.created_at);
                const lastAccessedAt = new Date(cache.last_accessed_at);
                
                const shouldDelete = createdAt < sevenDaysAgo || lastAccessedAt < threeDaysAgo;
                
                if (shouldDelete) {
                  try {
                    await github.rest.actions.deleteActionsCacheById({
                      owner,
                      repo,
                      cache_id: cache.id
                    });
                    console.log(`Deleted cache: ${cache.key} (${cache.id})`);
                    deletedCount++;
                  } catch (error) {
                    console.log(`Failed to delete cache ${cache.key}: ${error.message}`);
                  }
                }
              }
              
              console.log(`Deleted ${deletedCount} old caches`);
            } catch (error) {
              console.log(`Failed to cleanup caches: ${error.message}`);
            }

  cleanup-workflow-runs:
    name: Cleanup Old Workflow Runs
    runs-on: ubuntu-latest
    if: github.event.inputs.cleanup-type == 'all' || github.event_name == 'schedule'
    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            
            // Get all workflows
            const workflows = await github.rest.actions.listRepoWorkflows({
              owner,
              repo
            });
            
            const sixtyDaysAgo = new Date();
            sixtyDaysAgo.setDate(sixtyDaysAgo.getDate() - 60);
            
            let totalDeleted = 0;
            
            for (const workflow of workflows.data.workflows) {
              try {
                // Get workflow runs
                const runs = await github.rest.actions.listWorkflowRuns({
                  owner,
                  repo,
                  workflow_id: workflow.id,
                  per_page: 100,
                  status: 'completed'
                });
                
                // Keep the latest 50 runs per workflow, delete older ones
                const runsToDelete = runs.data.workflow_runs
                  .filter(run => new Date(run.created_at) < sixtyDaysAgo)
                  .slice(50); // Keep at least 50 recent runs
                
                let deletedCount = 0;
                for (const run of runsToDelete) {
                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner,
                      repo,
                      run_id: run.id
                    });
                    deletedCount++;
                  } catch (error) {
                    console.log(`Failed to delete run ${run.id}: ${error.message}`);
                  }
                }
                
                if (deletedCount > 0) {
                  console.log(`Deleted ${deletedCount} old runs for workflow: ${workflow.name}`);
                  totalDeleted += deletedCount;
                }
              } catch (error) {
                console.log(`Failed to process workflow ${workflow.name}: ${error.message}`);
              }
            }
            
            console.log(`Total deleted workflow runs: ${totalDeleted}`);

  cleanup-summary:
    name: Cleanup Summary
    runs-on: ubuntu-latest
    needs: [cleanup-artifacts, cleanup-docker-images, cleanup-caches, cleanup-workflow-runs]
    if: always()
    steps:
      - name: Summary
        run: |
          echo "## Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.cleanup-artifacts.result }}" == "success" ]]; then
            echo "✅ Artifacts cleanup: Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.cleanup-artifacts.result }}" == "skipped" ]]; then
            echo "⏭️ Artifacts cleanup: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Artifacts cleanup: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.cleanup-docker-images.result }}" == "success" ]]; then
            echo "✅ Docker images cleanup: Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.cleanup-docker-images.result }}" == "skipped" ]]; then
            echo "⏭️ Docker images cleanup: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Docker images cleanup: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.cleanup-caches.result }}" == "success" ]]; then
            echo "✅ Caches cleanup: Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.cleanup-caches.result }}" == "skipped" ]]; then
            echo "⏭️ Caches cleanup: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Caches cleanup: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.cleanup-workflow-runs.result }}" == "success" ]]; then
            echo "✅ Workflow runs cleanup: Completed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.cleanup-workflow-runs.result }}" == "skipped" ]]; then
            echo "⏭️ Workflow runs cleanup: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Workflow runs cleanup: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Cleanup completed on $(date)" >> $GITHUB_STEP_SUMMARY