name: Security Scan

on:
  push:
    branches: [main, v5]
  pull_request:
    branches: [main, v5]
  schedule:
    - cron: '0 6 * * 1' # Weekly on Monday at 6 AM UTC

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript', 'typescript']
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm run build:packages

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run OSV Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            -r
            --skip-git
            ./

      - name: Run Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.0

      - name: Use Node.js 22
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          npx license-checker --json --out licenses.json
          
          # Check for prohibited licenses
          PROHIBITED_LICENSES="GPL-2.0,GPL-3.0,LGPL-2.0,LGPL-3.0,AGPL-1.0,AGPL-3.0"
          
          node -e "
            const licenses = JSON.parse(require('fs').readFileSync('licenses.json'));
            const prohibited = '$PROHIBITED_LICENSES'.split(',');
            let violations = [];
            
            Object.entries(licenses).forEach(([pkg, info]) => {
              const license = info.licenses || '';
              if (prohibited.some(p => license.includes(p))) {
                violations.push(\`\${pkg}: \${license}\`);
              }
            });
            
            if (violations.length > 0) {
              console.log('❌ License violations found:');
              violations.forEach(v => console.log('  ' + v));
              process.exit(1);
            } else {
              console.log('✅ No license violations found');
            }
          "

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, secret-scan, supply-chain, license-check]
    if: always()
    steps:
      - name: Security Summary
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.codeql.result }}" == "success" ]]; then
            echo "✅ CodeQL Analysis: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CodeQL Analysis: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.secret-scan.result }}" == "success" ]]; then
            echo "✅ Secret Scanning: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Secret Scanning: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.supply-chain.result }}" == "success" ]]; then
            echo "✅ Supply Chain Security: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Supply Chain Security: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.license-check.result }}" == "success" ]]; then
            echo "✅ License Compliance: PASSED" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ License Compliance: FAILED" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Security scan completed on $(date)" >> $GITHUB_STEP_SUMMARY